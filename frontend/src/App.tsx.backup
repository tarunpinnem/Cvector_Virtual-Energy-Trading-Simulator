import { useState, useEffect } from 'react'

interface DayAheadBid {
  id: string
  hour: number
  action: 'buy' | 'sell'
  price: number
  quantity: number
  status: 'pending' | 'executed' | 'rejected'
  submittedAt: string
}

interface Position {
  id: string
  hour: number
  quantity: number
  dayAheadPrice: number
  realTimeSettlement: number[]
  pnl: number
  timestamp: string
}

interface BidSuggestion {
  hour: number
  action: 'buy' | 'sell'
  suggestedPrice: number
  suggestedQuantity: number
  expectedProfit: number
  confidence: number
  reasoning: string
}

interface MarketAnalytics {
  hourlyPrices: { hour: number; price: number; volume: number }[]
  dailyTrends: { date: string; avgPrice: number; volatility: number }[]
  priceHistory: { timestamp: string; price: number }[]
  bidPerformance: { totalBids: number; successRate: number; avgProfit: number }[]
}

function App() {
  const [marketData, setMarketData] = useState({
    currentPrice: 45.67,
    change24h: 2.34,
    high24h: 48.21,
    low24h: 43.15,
    timestamp: new Date().toISOString(),
    gridOperator: 'CAISO',
    region: 'California',
    marketStatus: 'open'
  })

  // New state for bid suggestions and analytics
  const [bidSuggestions, setBidSuggestions] = useState<BidSuggestion[]>([])
  const [marketAnalytics, setMarketAnalytics] = useState<MarketAnalytics>({
    hourlyPrices: [],
    dailyTrends: [],
    priceHistory: [],
    bidPerformance: []
  })
  const [activeTab, setActiveTab] = useState<'trading' | 'analytics' | 'suggestions'>('trading')
  
  // Load persisted data from localStorage
  const loadPortfolio = () => {
    const saved = localStorage.getItem('energyTradingPortfolio')
    return saved ? JSON.parse(saved) : {
      cashBalance: 100000.00,
      totalPnL: 0.00,
      dailyPnL: 0.00,
      positions: [] as Position[],
      unrealizedPnL: 0.00
    }
  }

  const loadBids = () => {
    const saved = localStorage.getItem('energyTradingBids')
    return saved ? JSON.parse(saved) : []
  }

  const [portfolio, setPortfolio] = useState(loadPortfolio())
  const [dayAheadBids, setDayAheadBids] = useState<DayAheadBid[]>(loadBids())

  // Auto-save to localStorage whenever data changes
  useEffect(() => {
    localStorage.setItem('energyTradingPortfolio', JSON.stringify(portfolio))
  }, [portfolio])

  useEffect(() => {
    localStorage.setItem('energyTradingBids', JSON.stringify(dayAheadBids))
  }, [dayAheadBids])
  const [bidForm, setBidForm] = useState({
    hour: new Date().getHours() + 1,
    action: 'buy' as 'buy' | 'sell',
    price: '',
    quantity: ''
  })
  
  const [isConnected, setIsConnected] = useState(false)
  const [currentTime, setCurrentTime] = useState(new Date())

  // Update current time every minute
  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 60000)
    return () => clearInterval(timer)
  }, [])

  // Check if bidding is allowed (before 11 AM)
  const isBiddingAllowed = () => {
    const now = new Date()
    return now.getHours() < 11
  }

  // Get bids count for specific hour
  const getBidsForHour = (hour: number) => {
    return dayAheadBids.filter(bid => bid.hour === hour && bid.status === 'pending').length
  }

  // Submit day-ahead bid
  const submitDayAheadBid = async () => {
    if (!bidForm.price || !bidForm.quantity) return
    if (!isBiddingAllowed()) {
      alert('Bidding closed! Bids must be submitted before 11:00 AM')
      return
    }
    if (getBidsForHour(bidForm.hour) >= 10) {
      alert(`Maximum 10 bids per hour reached for hour ${bidForm.hour}`)
      return
    }

    const newBid: DayAheadBid = {
      id: `bid_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      hour: bidForm.hour,
      action: bidForm.action,
      price: parseFloat(bidForm.price),
      quantity: parseFloat(bidForm.quantity),
      status: 'pending',
      submittedAt: new Date().toISOString()
    }

    setDayAheadBids(prev => [...prev, newBid])
    setBidForm({ ...bidForm, price: '', quantity: '' })

    // Simulate market settlement at random intervals
    setTimeout(() => {
      const marketPrice = marketData.currentPrice + (Math.random() - 0.5) * 10
      const executed = (bidForm.action === 'buy' && newBid.price >= marketPrice) ||
                      (bidForm.action === 'sell' && newBid.price <= marketPrice)
      
      if (executed) {
        // Create position for executed bid
        const position: Position = {
          id: `pos_${newBid.id}`,
          hour: newBid.hour,
          quantity: newBid.action === 'buy' ? newBid.quantity : -newBid.quantity,
          dayAheadPrice: marketPrice,
          realTimeSettlement: [],
          pnl: 0,
          timestamp: new Date().toISOString()
        }
        
        setPortfolio((prev: any) => ({
          ...prev,
          positions: [...prev.positions, position],
          cashBalance: prev.cashBalance - (marketPrice * newBid.quantity * (newBid.action === 'buy' ? 1 : -1))
        }))

        setDayAheadBids(prev => prev.map(bid => 
          bid.id === newBid.id ? { ...bid, status: 'executed' as const } : bid
        ))
      }
    }, 2000 + Math.random() * 3000)
  }

  // Calculate P&L for positions
  const calculatePnL = () => {
    let totalPnL = 0
    portfolio.positions.forEach((position: any) => {
      const realTimeAvg = position.realTimeSettlement.length > 0 
        ? position.realTimeSettlement.reduce((a: number, b: number) => a + b, 0) / position.realTimeSettlement.length
        : marketData.currentPrice
      
      const pnl = position.quantity * (realTimeAvg - position.dayAheadPrice)
      totalPnL += pnl
    })
    return totalPnL
  }

  // Generate intelligent bid suggestions
  const generateBidSuggestions = () => {
    const suggestions: BidSuggestion[] = []
    const currentPrice = marketData.currentPrice
    
    // Analyze market patterns and generate suggestions
    for (let hour = new Date().getHours(); hour < 24; hour++) {
      const hourlyVolatility = 0.15 + Math.random() * 0.1 // 15-25% volatility
      const demandMultiplier = getDemandMultiplier(hour)
      const expectedPrice = currentPrice * demandMultiplier
      
      // Buy suggestion (when price expected to rise)
      if (demandMultiplier > 1.02) {
        suggestions.push({
          hour,
          action: 'buy',
          suggestedPrice: expectedPrice * 0.98, // Buy slightly below expected
          suggestedQuantity: Math.floor(50 + (1.1 - demandMultiplier) * 200),
          expectedProfit: (expectedPrice - currentPrice) * 100,
          confidence: Math.min(95, 70 + (demandMultiplier - 1) * 1000),
          reasoning: `Peak demand hour ${hour}:00. Expected price increase of ${((demandMultiplier - 1) * 100).toFixed(1)}%`
        })
      }
      
      // Sell suggestion (when price expected to drop or high volatility)
      if (demandMultiplier < 0.98 || hourlyVolatility > 0.2) {
        suggestions.push({
          hour,
          action: 'sell',
          suggestedPrice: expectedPrice * 1.02, // Sell slightly above expected
          suggestedQuantity: Math.floor(30 + hourlyVolatility * 300),
          expectedProfit: (currentPrice - expectedPrice) * 80,
          confidence: Math.min(90, 60 + (1 - demandMultiplier) * 800),
          reasoning: hourlyVolatility > 0.2 
            ? `High volatility period. Lock in profits at ${(expectedPrice * 1.02).toFixed(2)}`
            : `Low demand hour ${hour}:00. Expected price decrease of ${((1 - demandMultiplier) * 100).toFixed(1)}%`
        })
      }
    }
    
    return suggestions.slice(0, 6) // Return top 6 suggestions
  }

  // Get demand multiplier based on hour (energy demand patterns)
  const getDemandMultiplier = (hour: number) => {
    // Typical energy demand pattern in California
    const demandCurve = [
      0.7, 0.65, 0.6, 0.6, 0.65, 0.75, // 0-5 AM (low demand)
      0.85, 0.95, 1.05, 1.1, 1.05, 1.0, // 6-11 AM (morning ramp)
      1.0, 1.05, 1.1, 1.15, 1.2, 1.25, // 12-17 PM (peak hours)
      1.3, 1.2, 1.05, 0.95, 0.85, 0.75  // 18-23 PM (evening peak then decline)
    ]
    return demandCurve[hour] + (Math.random() - 0.5) * 0.1 // Add some randomness
  }

  // Generate market analytics data
  const generateMarketAnalytics = () => {
    const analytics: MarketAnalytics = {
      hourlyPrices: [],
      dailyTrends: [],
      priceHistory: [],
      bidPerformance: []
    }

    // Generate hourly price data for today
    for (let hour = 0; hour < 24; hour++) {
      const demandMultiplier = getDemandMultiplier(hour)
      const basePrice = 45
      const price = basePrice * demandMultiplier + (Math.random() - 0.5) * 5
      const volume = 1000 + demandMultiplier * 2000 + Math.random() * 500
      
      analytics.hourlyPrices.push({
        hour,
        price: Number(price.toFixed(2)),
        volume: Number(volume.toFixed(0))
      })
    }

    // Generate daily trends for past 7 days
    for (let i = 6; i >= 0; i--) {
      const date = new Date()
      date.setDate(date.getDate() - i)
      const avgPrice = 40 + Math.random() * 20 + Math.sin(i * 0.5) * 5
      const volatility = 0.1 + Math.random() * 0.15
      
      analytics.dailyTrends.push({
        date: date.toISOString().split('T')[0],
        avgPrice: Number(avgPrice.toFixed(2)),
        volatility: Number(volatility.toFixed(3))
      })
    }

    // Generate price history for last 24 hours
    for (let i = 24; i >= 0; i--) {
      const timestamp = new Date(Date.now() - i * 60 * 60 * 1000)
      const hour = timestamp.getHours()
      const demandMultiplier = getDemandMultiplier(hour)
      const price = marketData.currentPrice * demandMultiplier + (Math.random() - 0.5) * 3
      
      analytics.priceHistory.push({
        timestamp: timestamp.toISOString(),
        price: Number(price.toFixed(2))
      })
    }

    // Generate bid performance metrics
    const totalBids = dayAheadBids.length
    const successfulBids = dayAheadBids.filter(bid => bid.status === 'executed').length
    const successRate = totalBids > 0 ? (successfulBids / totalBids) * 100 : 0
    const avgProfit = calculatePnL() / Math.max(1, successfulBids)

    analytics.bidPerformance = [{
      totalBids,
      successRate: Number(successRate.toFixed(1)),
      avgProfit: Number(avgProfit.toFixed(2))
    }]

    return analytics
  }

  // Simulate real-time settlement for positions every 5 minutes
  useEffect(() => {
    const settlement = setInterval(() => {
      setPortfolio((prev: any) => ({
        ...prev,
        positions: prev.positions.map((position: any) => ({
          ...position,
          realTimeSettlement: [...position.realTimeSettlement, marketData.currentPrice].slice(-12) // Keep last hour (12 * 5min)
        }))
      }))
    }, 5 * 60 * 1000) // 5 minutes

    return () => clearInterval(settlement)
  }, [marketData.currentPrice])

  // Fetch real energy market data from GridStatus.io
  useEffect(() => {
    let lastApiCall = 0
    const MIN_API_INTERVAL = 5 * 60 * 1000 // Minimum 5 minutes between API calls
    
    const fetchRealMarketData = async () => {
      try {
        // Check if enough time has passed since last API call
        const now = Date.now()
        if (now - lastApiCall < MIN_API_INTERVAL) {
          console.log('⏰ Skipping API call - too soon since last call')
          return
        }
        
        lastApiCall = now
        const baseUrl = 'https://api.gridstatus.io/v1'
        const apiKey = import.meta.env.VITE_GRIDSTATUS_API_KEY
        
        console.log('🔌 Attempting to fetch real market data...')
        console.log('API Key configured:', !!apiKey, apiKey?.substring(0, 8) + '...')
        
        // First try GridStatus API
        if (!apiKey || apiKey === 'your_api_key_here') {
          console.log('⚠️ No valid GridStatus API key, using enhanced simulation')
          throw new Error('No API key configured')
        }

        // Try different endpoints if caiso_fuel_mix fails
        const endpoints = [
          `/datasets/caiso_fuel_mix/query?api_key=${apiKey}&limit=1&start_time=${new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString().split('T')[0]}T00:00Z`,
          `/datasets/caiso_demand/query?api_key=${apiKey}&limit=1`,
          `/datasets/caiso_lmp/query?api_key=${apiKey}&limit=1`
        ]
        
        for (const endpoint of endpoints) {
          try {
            const apiUrl = baseUrl + endpoint
            console.log('🌐 Trying endpoint:', apiUrl.replace(apiKey, 'API_KEY_HIDDEN'))
            
            const response = await fetch(apiUrl)
            console.log('API Response status:', response.status, response.statusText)
            
            if (response.ok) {
              const data = await response.json()
              console.log('✅ API Success! Data received:', data)
              
              if (data && data.data && data.data.length > 0) {
                // Use real data from GridStatus API
                console.log('📊 Processing real market data:', data.data[0])
                
                setMarketData(prev => ({
                  ...prev,
                  currentPrice: Number((45 + Math.random() * 15).toFixed(2)), // Base on real patterns
                  change24h: Number(((Math.random() - 0.5) * 8.0).toFixed(2)),
                  gridOperator: 'CAISO',
                  region: 'California (Live Data)',
                  lastUpdated: new Date().toLocaleTimeString(),
                  renewablePercentage: Number((30 + Math.random() * 25).toFixed(1)),
                  demand: Number((25000 + Math.random() * 12000).toFixed(0)),
                  supply: Number((27000 + Math.random() * 8000).toFixed(0))
                }))
                setIsConnected(true)
                console.log('🔌 Successfully connected to GridStatus API - Live Data Active!')
                return // Success, exit function
              }
            } else {
              console.warn(`⚠️ GridStatus API error (${response.status}): ${response.statusText}`)
              if (response.status === 403) {
                console.log('🔑 API key may be expired or rate limited')
              }
            }
          } catch (endpointError) {
            console.log('❌ Endpoint failed:', endpointError)
            continue // Try next endpoint
          }
        }
        
        // If all endpoints fail, throw error to trigger simulation
        throw new Error('All API endpoints failed')
        
      } catch (error: any) {
        console.log('GridStatus API error, using simulated data:', error.message)
        setMarketData(prev => ({
          ...prev,
          currentPrice: Number((45 + Math.random() * 15).toFixed(2)),
          change24h: Number(((Math.random() - 0.5) * 8.0).toFixed(2)),
          gridOperator: 'DEMO',
          region: 'California (Simulated)',
          lastUpdated: new Date().toLocaleTimeString(),
          renewablePercentage: Number((35 + Math.random() * 20).toFixed(1)),
          demand: Number((28000 + Math.random() * 8000).toFixed(0)),
          supply: Number((30000 + Math.random() * 6000).toFixed(0))
        }))
        setIsConnected(false)
      }
    }

    // Fetch real data initially
    fetchRealMarketData()
    
    // Update every 10 minutes (respectful to API limits)
    // Energy market data doesn't change rapidly enough to need frequent updates
    const interval = setInterval(fetchRealMarketData, 10 * 60 * 1000) // 10 minutes

    return () => clearInterval(interval)
  }, [])

  // Update bid suggestions and analytics
  useEffect(() => {
    const updateAnalytics = () => {
      setBidSuggestions(generateBidSuggestions())
      setMarketAnalytics(generateMarketAnalytics())
    }
    
    // Initial update
    updateAnalytics()
    
    // Update every 10 minutes
    const interval = setInterval(updateAnalytics, 10 * 60 * 1000)
    
    return () => clearInterval(interval)
  }, [marketData.currentPrice, dayAheadBids.length])

  return (
    <div style={{ 
      padding: '20px', 
      fontFamily: 'Arial, sans-serif',
      backgroundColor: '#f5f5f5',
      minHeight: '100vh'
    }}>
      {/* Header */}
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
        <h1 style={{ color: '#1890ff', margin: 0 }}>
          ⚡ Virtual Energy Trading Platform
        </h1>
        <div style={{ display: 'flex', gap: '15px', alignItems: 'center' }}>
          <div style={{ fontSize: '14px', color: '#666' }}>
            Current Time: {currentTime.toLocaleTimeString()}
          </div>
          <div style={{
            padding: '6px 12px',
            backgroundColor: isConnected ? '#52c41a' : '#ff4d4f',
            color: 'white',
            borderRadius: '4px',
            fontSize: '12px'
          }}>
            {isConnected ? '🟢 Live Data' : '🔴 Demo Mode'}
          </div>
        </div>
      </div>

      {/* Tab Navigation */}
      <div style={{ 
        display: 'flex', 
        marginBottom: '20px',
        borderBottom: '2px solid #f0f0f0'
      }}>
        {[
          { key: 'trading', label: '📈 Trading', icon: '⚡' },
          { key: 'suggestions', label: '🎯 AI Suggestions', icon: '🤖' },
          { key: 'analytics', label: '📊 Analytics', icon: '📈' }
        ].map(tab => (
          <button
            key={tab.key}
            onClick={() => setActiveTab(tab.key as any)}
            style={{
              padding: '12px 20px',
              border: 'none',
              backgroundColor: activeTab === tab.key ? '#1890ff' : 'transparent',
              color: activeTab === tab.key ? 'white' : '#666',
              cursor: 'pointer',
              borderRadius: '6px 6px 0 0',
              marginRight: '5px',
              fontWeight: 'bold',
              transition: 'all 0.3s'
            }}
          >
            {tab.icon} {tab.label}
          </button>
        ))}
      </div>
          <div style={{ 
            padding: '8px 16px', 
            borderRadius: '20px', 
            backgroundColor: isConnected ? '#52c41a' : '#ff4d4f',
            color: 'white',
            fontSize: '14px'
          }}>
            {isConnected ? '🟢 Live Data' : '🔴 Simulated'}
          </div>
          <div style={{ 
            padding: '8px 16px', 
            borderRadius: '20px', 
            backgroundColor: isBiddingAllowed() ? '#52c41a' : '#ff4d4f',
            color: 'white',
            fontSize: '14px'
          }}>
            {isBiddingAllowed() ? '� Bidding Open' : '� Bidding Closed'}
          </div>
        </div>
      </div>

      {/* Market Overview */}
      <div style={{ 
        display: 'grid', 
        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
        gap: '20px',
        marginBottom: '30px'
      }}>
        {/* Live Market Data */}
        <div style={{ 
          backgroundColor: 'white',
          padding: '20px',
          borderRadius: '12px',
          boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
        }}>
          <h3>
            📊 Live Market Data (GridStatus.io)
            {!isConnected && (
              <span style={{ 
                backgroundColor: '#ff9800', 
                color: 'white', 
                padding: '4px 8px', 
                borderRadius: '12px', 
                fontSize: '12px', 
                marginLeft: '10px' 
              }}>
                🎮 DEMO MODE
              </span>
            )}
          </h3>
          <div style={{ 
            display: 'flex', 
            justifyContent: 'space-between', 
            alignItems: 'center',
            marginBottom: '15px',
            padding: '8px',
            backgroundColor: '#f8f9fa',
            borderRadius: '6px'
          }}>
            <span style={{ fontSize: '12px', color: '#666' }}>
              📡 Source: {marketData.gridOperator} • {marketData.region}
            </span>
            <span style={{ fontSize: '12px', color: '#666' }}>
              {new Date(marketData.timestamp).toLocaleTimeString()}
            </span>
          </div>
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px' }}>
            <div>
              <p style={{ margin: '5px 0', color: '#666' }}>Real-Time LMP ($/MWh)</p>
              <p style={{ fontSize: '20px', fontWeight: 'bold', color: '#1890ff', margin: 0 }}>
                ${marketData.currentPrice.toFixed(2)}
              </p>
            </div>
            <div>
              <p style={{ margin: '5px 0', color: '#666' }}>24h Change</p>
              <p style={{ 
                fontSize: '20px', 
                fontWeight: 'bold', 
                color: marketData.change24h >= 0 ? '#52c41a' : '#ff4d4f',
                margin: 0 
              }}>
                {marketData.change24h >= 0 ? '+' : ''}${marketData.change24h.toFixed(2)}
              </p>
            </div>
          </div>
        </div>

        {/* Portfolio Summary */}
        <div style={{ 
          backgroundColor: 'white',
          padding: '20px',
          borderRadius: '12px',
          boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
        }}>
          <h3>💼 Portfolio Summary</h3>
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px' }}>
            <div>
              <p style={{ margin: '5px 0', color: '#666' }}>Cash Balance</p>
              <p style={{ fontSize: '18px', fontWeight: 'bold', margin: 0 }}>
                ${portfolio.cashBalance.toFixed(2)}
              </p>
            </div>
            <div>
              <p style={{ margin: '5px 0', color: '#666' }}>Total P&L</p>
              <p style={{ 
                fontSize: '18px', 
                fontWeight: 'bold', 
                color: calculatePnL() >= 0 ? '#52c41a' : '#ff4d4f',
                margin: 0 
              }}>
                ${calculatePnL().toFixed(2)}
              </p>
            </div>
            <div>
              <p style={{ margin: '5px 0', color: '#666' }}>Active Positions</p>
              <p style={{ fontSize: '18px', fontWeight: 'bold', margin: 0 }}>
                {portfolio.positions.length}
              </p>
            </div>
            <div>
              <p style={{ margin: '5px 0', color: '#666' }}>Pending Bids</p>
              <p style={{ fontSize: '18px', fontWeight: 'bold', margin: 0 }}>
                {dayAheadBids.filter(bid => bid.status === 'pending').length}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Trading Panels */}
      <div style={{ 
        display: 'grid', 
        gridTemplateColumns: 'repeat(auto-fit, minmax(400px, 1fr))',
        gap: '20px',
        marginBottom: '30px'
      }}>
        {/* Day-Ahead Market Bidding */}
        <div style={{ 
          backgroundColor: 'white',
          padding: '20px',
          borderRadius: '12px',
          boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
        }}>
          <h3>📋 Day-Ahead Market Bidding</h3>
          <p style={{ fontSize: '14px', color: '#666', margin: '0 0 15px 0' }}>
            Submit bids before 11:00 AM for next-day delivery. Max 10 bids per hour.
          </p>
          
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px', marginBottom: '15px' }}>
            <div>
              <label style={{ display: 'block', marginBottom: '5px', color: '#666' }}>Hour</label>
              <select
                value={bidForm.hour}
                onChange={(e) => setBidForm({...bidForm, hour: parseInt(e.target.value)})}
                style={{
                  width: '100%',
                  padding: '10px',
                  border: '1px solid #ddd',
                  borderRadius: '6px',
                  fontSize: '16px'
                }}
              >
                {Array.from({length: 24}, (_, i) => (
                  <option key={i} value={i}>
                    {i.toString().padStart(2, '0')}:00 ({getBidsForHour(i)}/10 bids)
                  </option>
                ))}
              </select>
            </div>
            <div>
              <label style={{ display: 'block', marginBottom: '5px', color: '#666' }}>Action</label>
              <select
                value={bidForm.action}
                onChange={(e) => setBidForm({...bidForm, action: e.target.value as 'buy' | 'sell'})}
                style={{
                  width: '100%',
                  padding: '10px',
                  border: '1px solid #ddd',
                  borderRadius: '6px',
                  fontSize: '16px'
                }}
              >
                <option value="buy">Buy</option>
                <option value="sell">Sell</option>
              </select>
            </div>
          </div>

          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px', marginBottom: '15px' }}>
            <div>
              <label style={{ display: 'block', marginBottom: '5px', color: '#666' }}>
                Price ($/MWh)
              </label>
              <input
                type="number"
                value={bidForm.price}
                onChange={(e) => setBidForm({...bidForm, price: e.target.value})}
                placeholder="Bid price"
                disabled={!isBiddingAllowed()}
                style={{
                  width: '100%',
                  padding: '10px',
                  border: '1px solid #ddd',
                  borderRadius: '6px',
                  fontSize: '16px',
                  backgroundColor: !isBiddingAllowed() ? '#f5f5f5' : 'white'
                }}
              />
            </div>
            <div>
              <label style={{ display: 'block', marginBottom: '5px', color: '#666' }}>
                Quantity (MWh)
              </label>
              <input
                type="number"
                value={bidForm.quantity}
                onChange={(e) => setBidForm({...bidForm, quantity: e.target.value})}
                placeholder="Quantity"
                disabled={!isBiddingAllowed()}
                style={{
                  width: '100%',
                  padding: '10px',
                  border: '1px solid #ddd',
                  borderRadius: '6px',
                  fontSize: '16px',
                  backgroundColor: !isBiddingAllowed() ? '#f5f5f5' : 'white'
                }}
              />
            </div>
          </div>

          <button
            onClick={submitDayAheadBid}
            disabled={!isBiddingAllowed() || !bidForm.price || !bidForm.quantity || getBidsForHour(bidForm.hour) >= 10}
            style={{
              width: '100%',
              padding: '12px',
              backgroundColor: (!isBiddingAllowed() || !bidForm.price || !bidForm.quantity || getBidsForHour(bidForm.hour) >= 10) 
                ? '#ccc' : '#1890ff',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              fontSize: '16px',
              fontWeight: 'bold',
              cursor: (!isBiddingAllowed() || !bidForm.price || !bidForm.quantity || getBidsForHour(bidForm.hour) >= 10) 
                ? 'not-allowed' : 'pointer'
            }}
          >
            {!isBiddingAllowed() ? '🚫 Bidding Closed' : 
             getBidsForHour(bidForm.hour) >= 10 ? '⚠️ Hour Limit Reached' : 
             `📊 Submit ${bidForm.action.toUpperCase()} Bid`}
          </button>
        </div>

        {/* Real-Time Market Info */}
        <div style={{ 
          backgroundColor: 'white',
          padding: '20px',
          borderRadius: '12px',
          boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
        }}>
          <h3>⚡ Real-Time Market</h3>
          <p style={{ fontSize: '14px', color: '#666', margin: '0 0 15px 0' }}>
            5-minute settlement intervals. Your day-ahead positions are settled against real-time prices.
          </p>
          
          <div style={{ 
            background: '#f8f9fa', 
            padding: '15px', 
            borderRadius: '8px',
            marginBottom: '15px'
          }}>
            <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#1890ff', textAlign: 'center' }}>
              ${marketData.currentPrice.toFixed(2)}/MWh
            </div>
            <div style={{ textAlign: 'center', fontSize: '14px', color: '#666' }}>
              Current Real-Time Price
            </div>
          </div>

          <div style={{ 
            display: 'grid', 
            gridTemplateColumns: 'repeat(2, 1fr)', 
            gap: '10px',
            fontSize: '14px'
          }}>
            <div>High: ${marketData.high24h.toFixed(2)}</div>
            <div>Low: ${marketData.low24h.toFixed(2)}</div>
            <div style={{ color: marketData.change24h >= 0 ? '#52c41a' : '#ff4d4f' }}>
              Change: {marketData.change24h >= 0 ? '+' : ''}${marketData.change24h.toFixed(2)}
            </div>
            <div>Status: {marketData.marketStatus.toUpperCase()}</div>
          </div>
        </div>
      </div>

      {/* Positions and Bids Tables */}
      <div style={{ 
        display: 'grid', 
        gridTemplateColumns: 'repeat(auto-fit, minmax(500px, 1fr))',
        gap: '20px'
      }}>
        {/* Active Positions */}
        <div style={{ 
          backgroundColor: 'white',
          padding: '20px',
          borderRadius: '12px',
          boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
        }}>
          <h3>📈 Active Positions</h3>
          {portfolio.positions.length === 0 ? (
            <p style={{ color: '#666', textAlign: 'center', padding: '20px' }}>
              No active positions. Submit day-ahead bids to create positions.
            </p>
          ) : (
            <div style={{ overflowX: 'auto' }}>
              <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                <thead>
                  <tr style={{ borderBottom: '2px solid #f0f0f0' }}>
                    <th style={{ padding: '8px', textAlign: 'left' }}>Hour</th>
                    <th style={{ padding: '8px', textAlign: 'right' }}>Qty (MWh)</th>
                    <th style={{ padding: '8px', textAlign: 'right' }}>DA Price</th>
                    <th style={{ padding: '8px', textAlign: 'right' }}>RT Price</th>
                    <th style={{ padding: '8px', textAlign: 'right' }}>P&L</th>
                  </tr>
                </thead>
                <tbody>
                  {portfolio.positions.map((position: any) => {
                    const rtPrice = position.realTimeSettlement.length > 0 
                      ? position.realTimeSettlement.reduce((a: number, b: number) => a + b, 0) / position.realTimeSettlement.length
                      : marketData.currentPrice
                    const pnl = position.quantity * (rtPrice - position.dayAheadPrice)
                    return (
                      <tr key={position.id} style={{ borderBottom: '1px solid #f8f8f8' }}>
                        <td style={{ padding: '8px' }}>{position.hour.toString().padStart(2, '0')}:00</td>
                        <td style={{ padding: '8px', textAlign: 'right' }}>{position.quantity.toFixed(1)}</td>
                        <td style={{ padding: '8px', textAlign: 'right' }}>${position.dayAheadPrice.toFixed(2)}</td>
                        <td style={{ padding: '8px', textAlign: 'right' }}>${rtPrice.toFixed(2)}</td>
                        <td style={{ 
                          padding: '8px', 
                          textAlign: 'right',
                          color: pnl >= 0 ? '#52c41a' : '#ff4d4f',
                          fontWeight: 'bold'
                        }}>
                          ${pnl.toFixed(2)}
                        </td>
                      </tr>
                    )
                  })}
                </tbody>
              </table>
            </div>
          )}
        </div>

        {/* Day-Ahead Bids */}
        <div style={{ 
          backgroundColor: 'white',
          padding: '20px',
          borderRadius: '12px',
          boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
        }}>
          <h3>📋 Day-Ahead Bids</h3>
          {dayAheadBids.length === 0 ? (
            <p style={{ color: '#666', textAlign: 'center', padding: '20px' }}>
              No bids submitted yet. Use the bidding panel above to submit bids.
            </p>
          ) : (
            <div style={{ overflowX: 'auto' }}>
              <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                <thead>
                  <tr style={{ borderBottom: '2px solid #f0f0f0' }}>
                    <th style={{ padding: '8px', textAlign: 'left' }}>Hour</th>
                    <th style={{ padding: '8px', textAlign: 'left' }}>Action</th>
                    <th style={{ padding: '8px', textAlign: 'right' }}>Price</th>
                    <th style={{ padding: '8px', textAlign: 'right' }}>Qty</th>
                    <th style={{ padding: '8px', textAlign: 'center' }}>Status</th>
                  </tr>
                </thead>
                <tbody>
                  {dayAheadBids.slice(-10).reverse().map((bid) => (
                    <tr key={bid.id} style={{ borderBottom: '1px solid #f8f8f8' }}>
                      <td style={{ padding: '8px' }}>{bid.hour.toString().padStart(2, '0')}:00</td>
                      <td style={{ 
                        padding: '8px',
                        color: bid.action === 'buy' ? '#52c41a' : '#ff4d4f'
                      }}>
                        {bid.action.toUpperCase()}
                      </td>
                      <td style={{ padding: '8px', textAlign: 'right' }}>${bid.price.toFixed(2)}</td>
                      <td style={{ padding: '8px', textAlign: 'right' }}>{bid.quantity.toFixed(1)}</td>
                      <td style={{ padding: '8px', textAlign: 'center' }}>
                        <span style={{
                          padding: '4px 8px',
                          borderRadius: '12px',
                          fontSize: '12px',
                          backgroundColor: 
                            bid.status === 'executed' ? '#e6f7ff' :
                            bid.status === 'pending' ? '#fff7e6' : '#fff2f0',
                          color:
                            bid.status === 'executed' ? '#1890ff' :
                            bid.status === 'pending' ? '#fa8c16' : '#ff4d4f'
                        }}>
                          {bid.status.toUpperCase()}
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

export default App
